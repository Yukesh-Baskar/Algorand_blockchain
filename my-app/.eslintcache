[{"/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/index.js":"1","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/App.js":"2","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/DashBoard/dashBoard.jsx":"3","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/NavBar/Navbar.jsx":"4","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/MarketPlace/market.jsx":"5","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/ErrorPage/errorpage.jsx":"6","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/creatAsset/createAsset.jsx":"7","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/contract/constants.js":"8","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/homePage/HomePage.jsx":"9","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/carousel/carousel.jsx":"10","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/popup/popup.jsx":"11","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/homePage/img.jsx":"12"},{"size":432,"mtime":1670653712511,"results":"13","hashOfConfig":"14"},{"size":1257,"mtime":1670653712507,"results":"15","hashOfConfig":"14"},{"size":3330,"mtime":1670653712508,"results":"16","hashOfConfig":"14"},{"size":5155,"mtime":1670653712509,"results":"17","hashOfConfig":"14"},{"size":18885,"mtime":1670653712509,"results":"18","hashOfConfig":"14"},{"size":304,"mtime":1670653712509,"results":"19","hashOfConfig":"14"},{"size":13827,"mtime":1670653712510,"results":"20","hashOfConfig":"14"},{"size":159,"mtime":1670653712511,"results":"21","hashOfConfig":"14"},{"size":1290,"mtime":1670653712510,"results":"22","hashOfConfig":"14"},{"size":1770,"mtime":1670653712509,"results":"23","hashOfConfig":"14"},{"size":1784,"mtime":1670653712510,"results":"24","hashOfConfig":"14"},{"size":378,"mtime":1670653712510,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"187ed2q",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/index.js",[],"/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/App.js",[],"/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/DashBoard/dashBoard.jsx",["57","58"],"import axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { Button, Navbar, Container, Card } from \"react-bootstrap\";\nimport { Link, useParams,useNavigate} from 'react-router-dom'\n// import Swal from \"sweetalert2\";\nimport './dashBoard.css'\nimport FormData from 'form-data'\n// import MarketPlace from '../MarketPlace/market.jsx'\n\nconst DashBoard = () => {\n  const { userAddress } = useParams()\n  let [userAssets, setUserAssets] = useState([])\n  var [sellStatus ,setSellStatus] = useState(false)\n  const navigate = useNavigate()\n\n  // if (userAddress === '') {\n  //   alert(\"empty\")\n  // }\n\n  const Data = new FormData()\n\n  Data.append('userAccountAddress', userAddress)\n\n  useEffect(async () => {\n    await axios.get(`http://localhost:9966/createAsset/getAssets/${userAddress}`)\n      .then(async resp => {\n        await setUserAssets(resp.data)\n      }).catch(err => {\n        setUserAssets(err.response.status)\n      })\n  }, [])\n\n  const onClickFun = (event,param) => {\n    setSellStatus(true)\n    navigate(`/market/${userAddress}`, {state: {param}})\n  }  \n  return (\n    <div className=\"container y \">\n      <nav>\n        <Navbar variant=\"dark\">\n          <Container>\n            <Navbar.Brand href=\"#home\" ><strong>MarketBucket</strong></Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\n              <Navbar.Brand className=\"text-primary\"><strong>User Address</strong></Navbar.Brand>\n              <p className='text-white my-3 d'>{userAddress}</p>\n              <div className='d-block'>\n                <Link to=\"/\"><Button className='d'>Back</Button></Link>\n              </div>\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n      </nav>\n      <div>\n        {/* {console.log(userAssets)} */}\n        {userAssets === 401 ?\n          <div className=\"text-white my-4 justify-content-center\">\n            <center><h5>The user doesn't created any NFT's yet</h5></center>\n            <center><button className=\"bg-primary d text-white\">Create</button></center>\n          </div> :\n          userAssets.map((users) => {\n            // console.log(users);\n            return (\n              <div className='grid my-5 text-center text-success'>\n                <Card className=\"box\" key={users.tokenName} style={{ width: '18rem' }} >\n                  {console.log(users.File_URL)}\n                  <Card.Img  key={users.File_URL}   id=\"img\" variant=\"top\" src={users.File_URL} />\n                  <Card.Body>\n                    <Card.Title>Token Name : {users.tokenName}</Card.Title>\n                    <Card.Text>\n                      Asset ID : {users.tokenId}\n                    </Card.Text>\n                    <Card.Text>\n                      TotalSupply : {users.totalSupply}\n                      {\n                        sellStatus ? \"\" : <Button className=\"d\" onClick={event => onClickFun(event,users)}>Sell</Button>\n                      }\n                    </Card.Text>\n                    {/* <Link to=\"/market\"><Button variant=\"primary\" className=\"d\" onClick={sendData}>Sell</Button></Link> */}\n                  </Card.Body>\n                </Card>\n              </div>)\n          })}\n      </div>\n    </div>\n  )\n}\n\nexport default DashBoard;","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/NavBar/Navbar.jsx",["59","60","61","62"],"/*global AlgoSigner*/\nimport React, { useState, useEffect } from 'react'\nimport { Navbar, Container, Nav, Button } from 'react-bootstrap'\nimport CarouselPage from '../carousel/carousel'\nimport './Nav.css'\nimport {\n    BrowserRouter as Router,\n    useNavigate\n} from \"react-router-dom\";\nimport Swal from 'sweetalert2'\nimport HomePage from '../homePage/HomePage';\nimport PopUp from '../popup/popup';\n\n\n\n\nconst NavBar = () => {\n    const [state, setState] = useState('');\n    const [isTriggered, setTriggered] = useState(false);\n    const Navigate = useNavigate();\n    const [userAddress, setUserAdresses] = useState([])\n    // var userAddress = [];\n\n    useEffect(() => {\n        setTriggered()\n        setState()\n    }, []);\n\n\n    const HideElements = () => {\n        document.getElementsByClassName(\"HomePage\").innerHTML = null;\n    }\n\n    const ConnectFunc = async () => {\n        // console.log(userAddress);\n        if (typeof AlgoSigner !== 'object') {\n            return Swal.fire({\n                title: \"Wallet not found!!!\",\n                icon: 'error',\n                text: `Install AlgoSigner wallet for connecting the wallet.`,\n            });\n        }\n\n        const response = AlgoSigner.connect()\n            .then((resp) => {\n                // console.log(resp);\n            }).catch((err) => {\n                throw err;\n            })\n        const accounts = AlgoSigner.accounts({\n            ledger: 'TestNet'\n        })\n            .then(async (res) => {\n                await setUserAdresses(res)\n                // console.log(userAddress);\n                console.log(res)\n                if (res.length > 1) {\n                    setTriggered(true);\n                    document.getElementById(\"wallet\").style.display = \"block\"\n                } else {\n                    console.log(\"odjv\");\n                    setState(res[0].address)\n                    document.getElementById(\"wallet\").style.display = \"block\"\n                }\n            }).catch((err) => {\n                throw err;\n            })\n        // console.log(userAddress);\n        // triggerFunc()\n    }\n\n    // const triggerFunc = () => {\n    //     setTriggered(true);\n    // }\n\n    return (\n        <div>\n            <main>\n                <Navbar collapseOnSelect expand=\"lg\" variant=\"dark\" className='my-0'>\n                    <Container >\n                        <Navbar.Brand href=\"#home\"><strong>MarketBucket</strong></Navbar.Brand>\n                        <Navbar.Toggle onClick={() => HideElements()} aria-controls=\"responsive-navbar-nav\" />\n                        <Navbar.Collapse id=\"responsive-navbar-nav\">\n                            <Nav className=\"me-auto\">\n                                <Nav.Link href=\"#features\">Features</Nav.Link>\n                                <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n                            </Nav>\n                            <Nav>\n\n                                <Nav.Link href={`/market/${state}`}>MarketPlace</Nav.Link>\n                                <Nav.Link state href={`/dashBoard/${state}`}>\n                                    DashBoard\n                                </Nav.Link>\n\n                                {/* <Nav.Link href=\"/SignUp\">SignUp</Nav.Link> */}\n\n                                <div className='my-0'>\n                                    <Button onClick={ConnectFunc} className={\"mx-2\"} id=\"bt\" >Connect Wallet</Button>\n                                    <Button className='d' onClick={(props) => {\n                                        props = { state }\n                                        state === '' ? Swal.fire({\n                                            title: \"Connect wallet!!!\",\n                                            icon: 'error',\n                                            text: `Connect wallet to create asset`,\n                                        }) : Navigate(\"/createAsset\", { state })\n                                    }}>Create</Button>\n                                    <p id='wallet' className='mx-2 my-1'>{state}</p>\n                                </div>\n                            </Nav>\n                        </Navbar.Collapse>\n                    </Container>\n                </Navbar>\n                {console.log(userAddress)}\n                <div className='justify-content-center'>\n                    <PopUp triggerStatus={isTriggered} usersAddress={userAddress} setTrigger={setTriggered} selectAddress={setState} />\n                </div>\n                <HomePage />\n            </main>\n\n        </div>\n    )\n}\n\n\n\nexport default NavBar;\n\n\n\n\n\n\n\n\n\n\n\n\n\n// const NavBar = () => {\n//     var [user,setData] = useState({\n//         name : \"\"\n//     })\n\n//     let name;\n\n//     const getState = async (e) => {\n//         name = e.target.name\n//     }\n\n//     const setState = () => {\n//         setData({\n//             name : \"hello\"\n//         })\n//     }\n\n//     return (\n//         <div>\n//             <input name='name' value={user.name} onChange={getState}></input>\n//             <h1>{user.name}</h1>\n//             <button onClick={setState}>ClickMe</button>\n//         </div>\n//     )\n// }\n\n","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/MarketPlace/market.jsx",["63","64","65","66","67","68","69","70","71","72","73","74","75","76"],"/* global AlgoSigner */\nimport React, { useState, useEffect } from 'react'\nimport '../creatAsset/createAsset.css'\nimport { APPID, CONTRACT_ADDRESS } from '../../contract/constants'\nimport { Button, Form, Card } from 'react-bootstrap'\nimport { Link, useLocation, useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport FormData from 'form-data'\nimport Swal from 'sweetalert2'\nimport './market.css'\nimport { set } from 'mongoose'\nconst algosdk = require(\"algosdk\")\n\n\nconst MarketPlace = () => {\n    const { userAddress } = useParams()\n    const location = useLocation()\n    const [sellOrders, setSellOrders] = useState(\"\")\n    let [getSellOrders, setGetSellOrders] = useState([])\n    const [state, setState] = useState({\n        sellerAssetId: \"\", sellerTokenName: \"\", sellerAskingAmount: \"\"\n    })\n\n    useEffect(async () => {\n        if (location.state != null) {\n            setState({\n                sellerAssetId: await location.state.param.tokenId,\n                sellerTokenName: await location.state.param.tokenName,\n            })\n        }\n    }, [])\n\n    useEffect(async () => {\n        await axios.get(`http://localhost:9966/sellAsset/getSellOrders`)\n            .then(async (resp) => {\n                console.log(resp.data)\n                await setGetSellOrders(resp.data)\n                console.log(resp.data)\n            }).catch((err) => {\n                setGetSellOrders(err.response.status)\n            })\n    }, [sellOrders])\n\n\n    const testServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const token = {\n        'x-API-key': \"tzV5ZpDgtqaBUzskSO6Ly8TyYVlguUyt75iqYpsa\"\n    }\n    const port = 443\n\n    const EncodeBytes = (utf8String) => {\n        let encoder = new TextEncoder()\n        return encoder.encode(utf8String)\n    }\n\n    const TextDecoderr = (data) => {\n        let decoder = new TextDecoder()\n        return decoder.decode(data)\n    }\n\n    const getData = (e) => {\n        console.log(e.target.value);\n        const newData = { ...state };\n        newData[e.target.id] = e.target.value;\n        setState(newData);\n        // console.log(state);\n    }\n\n    const SetData = () => {\n\n    }\n\n    const ClearData = () => {\n\n    }\n\n    const sellAssetFunc = async (e) => {\n        let algoClient = new algosdk.Algodv2(token, testServer, port);\n        const params = await algoClient.getTransactionParams().do();\n        const AppId = APPID;\n        const AppArgs = [EncodeBytes(\"sellNFT\")];\n        const accounts = undefined;\n\n        const foreignApps = undefined;\n        console.log(state.sellerAssetId);\n\n        const foreignAssets = [Number(state.sellerAssetId)];\n        const note = new Uint8Array();\n        const buffer = new ArrayBuffer(34);\n        const lease = new Uint8Array(buffer, 2);\n        const rekeyTo = await CONTRACT_ADDRESS;\n        const assetInde = Number(state.sellerAssetId);\n\n        const closeRemainderTo = undefined;\n        const revocationTarget = undefined;\n        const amount = 1;\n\n        const appCall = algosdk.makeApplicationNoOpTxn(\n            userAddress,\n            params,\n            AppId,\n            AppArgs,\n            accounts,\n            foreignApps,\n            foreignAssets,\n        )\n\n        const transferASA = algosdk.makeAssetTransferTxnWithSuggestedParams(\n            userAddress,\n            CONTRACT_ADDRESS,\n            closeRemainderTo,\n            revocationTarget,\n            amount,\n            note,\n            assetInde,\n            params,\n        );\n\n        algosdk.assignGroupID([appCall, transferASA]);\n\n        const binaryTxs = [appCall.toByte(), transferASA.toByte()];\n        const base64Txs = binaryTxs.map((binary) => AlgoSigner.encoding.msgpackToBase64(binary));\n\n        const signedTxs = await AlgoSigner.signTxn([\n            {\n                txn: base64Txs[0],\n            },\n            {\n                txn: base64Txs[1],\n            },\n        ]);\n        // The signed transaction array can then be sent using the SDK.\n        const binarySignedTxs = signedTxs.map((tx) => AlgoSigner.encoding.base64ToMsgpack(tx.blob));\n        await algoClient.sendRawTransaction(binarySignedTxs).do()\n            .then(async (resp) => {\n                console.log(resp.txId);\n                // var Data = new FormData();\n                // Data.append('assetInde', assetInde);\n                // Data.append('assetName', state.tokenName);\n                var body = await state;\n                await axios.post(`http://localhost:9966/sellAsset/sellOrder/${userAddress}`, body)\n                    .then((resp) => {\n                        setSellOrders(resp.data)\n                        return Swal.fire({\n                            title: \"SellOrder Created\",\n                            icon: 'success',\n                            text: `${resp.data}`,\n                        });\n                    }).catch((err) => {\n                        console.log(err);\n                        return Swal.fire({\n                            title: \"Error\",\n                            icon: 'err',\n                            text: `Error occured with ${err}`,\n                        });\n                    })\n            }).catch((err) => {\n                return Swal.fire({\n                    title: \"Error\",\n                    icon: 'err',\n                    text: `Token already deposited for selling on the marketplace`,\n                });\n            })\n    }\n\n    const check = async () => {\n        var body = await state;\n        console.log(body);\n        await axios.post(`http://localhost:9966/sellAsset/sellOrder/${userAddress}`, body)\n            .then((resp) => {\n                return Swal.fire({\n                    title: \"SellOrder Created\",\n                    icon: 'success',\n                    text: `${resp.data}`,\n                });\n            }).catch((err) => {\n                return Swal.fire({\n                    title: \"Error\",\n                    icon: 'err',\n                    text: `Error occured`,\n                });\n            })\n    }\n\n    const buyNFT = async (event, data) => {\n        console.log(data);\n        let algoClient = new algosdk.Algodv2(token, testServer, port);\n        const params = await algoClient.getTransactionParams().do();\n        const Appid = await APPID;\n        const AppArgs = [];\n        await AppArgs.push(EncodeBytes(\"GRP\"))\n        const accounts = [];\n        await accounts.push(data.userAddress)\n\n        const foreignApps = undefined;\n        const foreignAssets = [];\n        const buffer = new ArrayBuffer(34);\n        const lease = new Uint8Array(buffer, 2);\n        const note = new Uint8Array()\n        const rekeyTo = await CONTRACT_ADDRESS\n\n        const txn = algosdk.makeApplicationNoOpTxn(\n            userAddress,\n            params,\n            Appid,\n            AppArgs,\n            accounts,\n            foreignApps,\n            foreignAssets,\n            note,\n            lease,\n            rekeyTo\n        )\n\n        const params1 = await algoClient.getTransactionParams().do();\n        const Appid1 = await APPID;\n        const AppArgs1 = [];\n        await AppArgs1.push(EncodeBytes(\"GRP1\"))\n        const accounts1 = [];\n        const foreignApps1 = undefined;\n        const foreignAssets1 = [];\n        foreignAssets1.push(Number(data.sellerAssetId))\n\n        const txn1 = algosdk.makeApplicationNoOpTxn(\n            userAddress,\n            params1,\n            Appid1,\n            AppArgs1,\n            accounts1,\n            foreignApps1,\n            foreignAssets1,\n            note,\n            lease,\n        )\n\n        algosdk.assignGroupID([txn, txn1]);\n\n        const binaryTxs = [txn.toByte(), txn1.toByte()];\n        const base64Txs = binaryTxs.map((binary) => AlgoSigner.encoding.msgpackToBase64(binary));\n\n        const signedTxs = await AlgoSigner.signTxn([\n            {\n                txn: base64Txs[0],\n            },\n            {\n                txn: base64Txs[1],\n            },\n        ]);\n        // The signed transaction array can then be sent using the SDK.\n\n        const binarySignedTxs = signedTxs.map((tx) => AlgoSigner.encoding.base64ToMsgpack(tx.blob));\n        const id = await algoClient.sendRawTransaction(binarySignedTxs).do();\n        console.log(id);\n      \n    }\n\n    return (\n        <div className='ty'>\n            <div className='container' id='container'>\n                <Link to=\"/\"><Button className='d my-1'>Back</Button></Link>\n                <div className='col-md-10 d-flex mx-5 text-white'>\n                    <h1>Top collections</h1>\n                    <p className='text-white mx-2 my-3 d'>{userAddress}</p>\n                </div>\n                <div className='row mx-1' id='q'>\n                    <div className='col'>\n                        <div className='col-3'>\n                            <img className='img1' alt='Loaded Lions' src='https://d2vi0z68k5oxnr.cloudfront.net/273dc24c-5b5f-45d9-83d3-5db578bdce79/original.gif'></img>\n\n                            <div className='yy my-3' >\n                                <svg width=\"24\" height=\"24\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2.72727L25.2727 0L28.5455 5.09091L34.7273 5.27273L34.9091 11.4545L40 14.7273L37.2727 20L40 25.2727L34.9091 28.5455L34.7273 34.7273L28.5455 34.9091L25.2727 40L20 37.2727L14.7273 40L11.4545 34.9091L5.27273 34.7273L5.09091 28.5455L0 25.2727L2.72727 20L0 14.7273L5.09091 11.4545L5.27273 5.27273L11.4545 5.09091L14.7273 0L20 2.72727Z\" fill=\"url(#8b00049f-bd2b-41d4-9bb0-c905d9d08e96)\"></path><path d=\"M17.4988 25.4956L11.9995 20.5876L14.445 18.4051L17.4988 21.1382L26.052 13.4971L28.4975 15.6796L17.4988 25.4956Z\" fill=\"white\"></path><defs><linearGradient id=\"8b00049f-bd2b-41d4-9bb0-c905d9d08e96\" x1=\"0\" y1=\"20\" x2=\"40\" y2=\"20\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#1199FA\"></stop><stop offset=\"1\" stop-color=\"#11D0FA\"></stop></linearGradient></defs></svg>\n                                <h5 className='text-white mx-1'>Loaded Lions</h5>\n                            </div>\n                        </div>\n                        <div className='col-3'>\n                            <img className='img1' alt='kcittyCubs' src='https://d2vi0z68k5oxnr.cloudfront.net/3b55fd06-9bbb-42a9-94ba-4c4b8f47dd6f/original.gif'></img>\n                            <div className='yy my-3'>\n                                <svg width=\"24\" height=\"24\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2.72727L25.2727 0L28.5455 5.09091L34.7273 5.27273L34.9091 11.4545L40 14.7273L37.2727 20L40 25.2727L34.9091 28.5455L34.7273 34.7273L28.5455 34.9091L25.2727 40L20 37.2727L14.7273 40L11.4545 34.9091L5.27273 34.7273L5.09091 28.5455L0 25.2727L2.72727 20L0 14.7273L5.09091 11.4545L5.27273 5.27273L11.4545 5.09091L14.7273 0L20 2.72727Z\" fill=\"url(#8b00049f-bd2b-41d4-9bb0-c905d9d08e96)\"></path><path d=\"M17.4988 25.4956L11.9995 20.5876L14.445 18.4051L17.4988 21.1382L26.052 13.4971L28.4975 15.6796L17.4988 25.4956Z\" fill=\"white\"></path><defs><linearGradient id=\"8b00049f-bd2b-41d4-9bb0-c905d9d08e96\" x1=\"0\" y1=\"20\" x2=\"40\" y2=\"20\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#1199FA\"></stop><stop offset=\"1\" stop-color=\"#11D0FA\"></stop></linearGradient></defs></svg>\n                                <h5 className='text-white mx-1'>KcittyCubs</h5>\n                            </div>\n                        </div>\n                        <div className='col-3 align-items-center'>\n                            <img className='img1' alt='WriggedTigers' src='https://d2vi0z68k5oxnr.cloudfront.net/8bdc24af-5341-4701-af67-47a921b6b8b4/original.gif'></img>\n                            <div className='yy justify-content-center my-3'>\n                                <svg width=\"24\" height=\"24\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2.72727L25.2727 0L28.5455 5.09091L34.7273 5.27273L34.9091 11.4545L40 14.7273L37.2727 20L40 25.2727L34.9091 28.5455L34.7273 34.7273L28.5455 34.9091L25.2727 40L20 37.2727L14.7273 40L11.4545 34.9091L5.27273 34.7273L5.09091 28.5455L0 25.2727L2.72727 20L0 14.7273L5.09091 11.4545L5.27273 5.27273L11.4545 5.09091L14.7273 0L20 2.72727Z\" fill=\"url(#8b00049f-bd2b-41d4-9bb0-c905d9d08e96)\"></path><path d=\"M17.4988 25.4956L11.9995 20.5876L14.445 18.4051L17.4988 21.1382L26.052 13.4971L28.4975 15.6796L17.4988 25.4956Z\" fill=\"white\"></path><defs><linearGradient id=\"8b00049f-bd2b-41d4-9bb0-c905d9d08e96\" x1=\"0\" y1=\"20\" x2=\"40\" y2=\"20\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#1199FA\"></stop><stop offset=\"1\" stop-color=\"#11D0FA\"></stop></linearGradient></defs></svg>\n                                <h5 className='text-white mx-1'>WriggedTiger</h5>\n                            </div>\n                        </div>\n                        <div className='col-3'>\n                            <img className='img1' alt='PsychoKitties' src='https://d2vi0z68k5oxnr.cloudfront.net/f51698c0-5545-4f4f-91c3-ac748e141d90/original.gif'></img>\n                            <div className='yy my-3'>\n                                <svg width=\"24\" height=\"24\" viewBox=\"0 0 40 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M20 2.72727L25.2727 0L28.5455 5.09091L34.7273 5.27273L34.9091 11.4545L40 14.7273L37.2727 20L40 25.2727L34.9091 28.5455L34.7273 34.7273L28.5455 34.9091L25.2727 40L20 37.2727L14.7273 40L11.4545 34.9091L5.27273 34.7273L5.09091 28.5455L0 25.2727L2.72727 20L0 14.7273L5.09091 11.4545L5.27273 5.27273L11.4545 5.09091L14.7273 0L20 2.72727Z\" fill=\"url(#8b00049f-bd2b-41d4-9bb0-c905d9d08e96)\"></path><path d=\"M17.4988 25.4956L11.9995 20.5876L14.445 18.4051L17.4988 21.1382L26.052 13.4971L28.4975 15.6796L17.4988 25.4956Z\" fill=\"white\"></path><defs><linearGradient id=\"8b00049f-bd2b-41d4-9bb0-c905d9d08e96\" x1=\"0\" y1=\"20\" x2=\"40\" y2=\"20\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#1199FA\"></stop><stop offset=\"1\" stop-color=\"#11D0FA\"></stop></linearGradient></defs></svg>\n                                <h5 className='text-white mx-1'>PsychoKitties</h5>\n                            </div>\n                        </div>\n                    </div>\n                    <div className='text-white my-3'>\n                        <h1>\n                            The Marketplace\n                        </h1>\n                    </div>\n                    <div className='content col-md-6'>\n                        <Form className='text-white' enctype=\"multipart/form-data\" method=\"post\">\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label><strong>TokenName</strong></Form.Label>\n                                <Form.Control className='text-white' id='sellerTokenName' type=\"name\" name='sellerTokenName' placeholder=\"Enter token name\" autoComplete='off' defaultValue={state.sellerTokenName == \"\" ? \"\" : state.sellerTokenName} value={state.sellerTokenName} onChange={getData} />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label><strong>Token ID</strong></Form.Label>\n                                <Form.Control className='text-white' id='sellerAssetId' type=\"number\" name='sellerAssetId' placeholder=\"sellerAssetId\" defaultValue={state.sellerAssetId == \"\" ? \"\" : state.sellerAssetId} value={state.sellerAssetId} onChange={getData} required />\n                            </Form.Group>\n\n                            <Form.Group className=\"mb-3\">\n                                <Form.Label><strong>Asking Amount</strong></Form.Label>\n                                <Form.Control className='text-white' id='sellerAskingAmount' type=\"number\" name='sellerAskingAmount' placeholder=\"sellerAskingAmount\" value={state.sellerAskingAmount} onChange={getData} required={true} />\n                            </Form.Group>\n                            {/* \n                            <Form.Group className=\"mb-3 d-none\">\n                                <Form.Label><strong>sellerAddress</strong></Form.Label>\n                                <Form.Control className='text-white' id='sellerAddress' type=\"number\" name='sellerAddress' placeholder=\"sellerAddress\" defaultValue={userAddress} value={userAddress} onChange={getData} required={true} />\n                            </Form.Group> */}\n                            <div className='mx-2'>\n                                {\n                                    state.sellerTokenName == \"\" ? <Button variant=\"primary\" type=\"button\" required onClick={ClearData} className=\"mx-2\">\n                                        clear\n                                    </Button> : \"\"\n                                }\n                                <Button variant=\"primary\" type=\"button\" required onClick={sellAssetFunc} className=\"mx-2\">\n                                    Sell\n                                </Button>\n                            </div>\n                        </Form>\n                    </div>\n                </div>\n                <div className='col-md-12 text-white'>\n                    {getSellOrders == 401 ?\n                        <div className='text-white'>\n                            <h2>No data found</h2>\n                        </div> :\n                        getSellOrders.map((orders) => {\n                            return (\n                                <div className='grid my-5 text-center text-success'>\n                                    <Card className=\"box\" key={orders.userAddress} style={{ width: '18rem' }} >\n                                        <Card.Img className='d-flex' key={orders.sellerFileURL} id=\"img\" variant=\"top\" src={orders.sellerFileURL} />\n                                        <Card.Body>\n                                            <Card.Text className='text-decoration-underline'>Owner Address : {orders.userAddress}</Card.Text>\n                                            <Card.Text>\n                                                Asset ID : {orders.sellerAssetId}\n                                            </Card.Text>\n\n                                            <Card.Text>\n                                                TokenName : {orders.sellerTokenName}\n                                                <Card.Text>\n                                                    Amount : {orders.sellerAskingAmount}Algo's\n                                                </Card.Text>\n                                                <Button className=\"d\" onClick={event => buyNFT(event, orders)}>Buy</Button>\n                                            </Card.Text>\n                                        </Card.Body>\n                                    </Card>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MarketPlace","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/ErrorPage/errorpage.jsx",[],"/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/creatAsset/createAsset.jsx",["77","78","79","80","81","82","83","84","85","86"],"/*global AlgoSigner*/\nimport React, { useState, useEffect } from 'react'\nimport './createAsset.css'\nimport { Navbar, Container, Nav, NavDropdown, Button, Col, Form, Spinner } from 'react-bootstrap'\nimport { useNavigate, Link, useLocation } from 'react-router-dom'\nimport crypto from 'crypto'\nimport Swal from 'sweetalert2'\nimport axios from 'axios'\nimport algosdk from 'algosdk'\nimport { CirclesWithBar } from 'react-loader-spinner'\n\nfunction CreateAsset() {\n  const [data, setData] = useState({\n    tokenName: \"\", tokenId: \"\", totalsupply: \"\", NFT_URL: \"\"\n  })\n  const [isLoading, setLoading] = useState(false);\n  const [file, setFile] = useState('')\n  const [img, setImage] = useState()\n  const [url, setUrl] = useState('');\n  const [txnHash, setTrxnHash] = useState(null)\n\n  useEffect(() => {\n    setLoading()\n  }, [])\n\n  let location = useLocation()\n  const userAddress = location.state\n  const getData = (e) => {\n    const newData = { ...data };\n    newData[e.target.id] = e.target.value;\n    setData(newData);\n  }\n\n  const getFileData = (e) => {\n    const file = e.target.files[0];\n    const file1 = e.target.files[0];\n    setImage(URL.createObjectURL(file1))\n    setFile(file)\n  }\n\n  const SetData = async (e) => {\n    setLoading(true)\n    var a = [document.getElementById('tokenName').value, document.getElementById('totalsupply').value]\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === '') {\n        setLoading(false)\n        return Swal.fire({\n          title: \"error\",\n          icon: 'error',\n          text: `Empty field cant be accepted ${a[i]}`,\n        })\n      }\n    }\n\n    const Data1 = new FormData();\n    Data1.append('file-upload', file)\n\n    var URL;\n\n    await axios.post('http://localhost:9966/createAsset/uploadImage', Data1)\n      .then(async resp => {\n        await setUrl(resp.data)\n        URL = await resp.data\n        console.log(URL);\n    })\n\n    e.preventDefault();\n    const Data = new FormData()\n    // const File = { file }\n    let tokenId = data.tokeId;\n    await tokenId++\n\n    const testServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const token = {\n      'x-API-key': \"tzV5ZpDgtqaBUzskSO6Ly8TyYVlguUyt75iqYpsa\"\n    }\n\n    const port = 443\n    let algoClient = new algosdk.Algodv2(token, testServer, port)\n    const startingAmount = algoClient.amount;\n    let params = await algoClient.getTransactionParams().do();\n    const defaultFrozen = false;\n    const unitName = \"AlgoNFT\";\n    const assetName = data.tokenName;\n    const managerAddr = userAddress;\n    const reserveAddr = undefined;\n    const freezeAddr = undefined;\n    const clawbackAddr = undefined;\n    const decimals = 0;\n    const total = 1;\n    const hash = await crypto.createHash('sha256');\n    hash.update(\"metadatafile\");\n    const metadata = new Uint8Array(hash.digest());\n    console.log(\"hello\");\n\n    setTimeout(async () => {\n      console.log(\"__\", await URL);\n      const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n        from: userAddress,\n        total,\n        decimals,\n        assetName,\n        unitName,\n        assetURL: \"https://ipfs.io/ipfs/QmdVnZvDPneyL5bRcsjABCAJeZoF1ABAAYgJyuT1RAQvx6\",\n        assetMetadataHash: metadata,\n        defaultFrozen,\n        freeze: freezeAddr,\n        manager: managerAddr,\n        clawback: clawbackAddr,\n        reserve: reserveAddr,\n        suggestedParams: params,\n      })\n\n      const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n      let signedTxs = await AlgoSigner.signTxn([{ txn: txn_b64 }])\n      console.log(signedTxs)\n\n      // Get the base64 encoded signed transaction and convert it to binary\n      let binarySignedTx = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n\n      console.log(\"hererere\");\n\n      // Send the transaction through the SDK client\n      let tx = await algoClient.sendRawTransaction(binarySignedTx).do()\n      console.log(tx);\n\n      let assetID = null;\n      // wait for transaction to be confirmed\n      const ptx = await algosdk.waitForConfirmation(algoClient, tx.txId, 4);\n      // Get the new asset's information from the creator account\n      assetID = ptx[\"asset-index\"];\n      //Get the completed Transaction\n      console.log(assetID);\n      console.log(\"Transaction \" + tx.txId + \" confirmed in round \" + ptx[\"confirmed-round\"] + \"assetId\" + assetID);\n\n      Data.append('userAccountAddress', userAddress)\n      Data.append('tokenName', data.tokenName);\n      Data.append('tokenId', assetID);\n      Data.append('totalSupply', data.totalsupply);\n      await Data.append('File_URL', URL)\n\n      await axios.post('http://localhost:9966/createAsset/upload', Data)\n        .then(resp => {\n          if (resp.status === 204) {\n            setLoading(false)\n            return Swal.fire({\n              title: \"Error\",\n              icon: 'error',\n              text: `${resp.statusText}`,\n            })\n          }\n          setTrxnHash(tx.txId)\n          setLoading(false)\n          Swal.fire({\n            title: \"NFT created\",\n            icon: 'success',\n            text: `Successfully created NFT`,\n          })\n        })\n        .catch(err => {\n          setLoading(false)\n\n          Swal.fire({\n            title: \"error\",\n            icon: 'error',\n            text: `${err}`,\n          })\n        })\n    }, 6000);\n  }\n\n  const ClearData = () => {\n    const value = \"\";\n    setData({\n      tokenName: value,\n      totalsupply: value,\n    })\n    setImage('')\n    // document.getElementsByClassName(\"image\").value = ''\n\n  }\n\n  return (\n    <div className='u'>\n      <div className='container'>\n        <div className='row'>\n          <div className='t'>\n            <nav>\n              <Navbar variant=\"dark\">\n                <Container>\n                  <Navbar.Brand href=\"#home\" ><strong>MarketBucket</strong></Navbar.Brand>\n                  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                  <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <p className='text-white my-3 d'>{userAddress}</p>\n                    <div className='d-block'>\n                      <Link to=\"/\"><Button className='d'>Back</Button></Link>\n                    </div>\n                  </Navbar.Collapse>\n                </Container>\n              </Navbar>\n            </nav>\n          </div>\n        </div>\n        <div className='col-md-6 my-5 mx-5 text-white'>\n          <h1>Explore</h1>\n        </div>\n        <div className='row'>\n          <div className='col-md-6 text-center text-white'>\n            <Form className='text-white' action='/createAsset/upload' enctype=\"multipart/form-data\" method=\"post\">\n              <Form.Group className=\"mb-3\">\n                <Form.Label><strong>Token Name</strong></Form.Label>\n                <Form.Control className='text-white' id='tokenName' type=\"name\" name='tokenName' placeholder=\"Enter token name\" autoComplete='off' value={data.tokenName} onChange={getData} />\n              </Form.Group>\n\n              <Form.Group className=\"mb-3\">\n                <Form.Label><strong>TotalSupply</strong></Form.Label>\n                <Form.Control className='text-white' id='totalsupply' type=\"number\" name='totalsupply' placeholder=\"Totalsupply\" value={data.totalsupply} onChange={getData} required />\n              </Form.Group>\n\n              <Form.Group className=\"mb-3 \">\n                <Form.Label><strong>Choose Image</strong></Form.Label>\n                <Form.Control className='text-white' id='image' type=\"file\" name='file-upload' onChange={getFileData} required />\n              </Form.Group>\n\n              <div className='mx-2'>\n                <Button variant=\"primary\" type=\"button\" required onClick={ClearData} className=\"mx-2\">\n                  clear\n                </Button>\n\n                <Button variant=\"primary\" type=\"button\" required onClick={SetData} className=\"mx-2\">\n                  submit\n                </Button>\n              </div>\n            </Form>\n          </div>\n\n          <div className='col-6 text-primary' id='uuu'>\n            <h3>Selected Image Will Apper here :</h3>\n            <div className='image'>\n              <img src={img} alt=\"\" />\n            </div>\n          </div>\n          <div className='col-md-10 my-3 ' id=\"\">\n            {!isLoading ? txnHash === null ? '' : <a href={`https://testnet.algoexplorer.io/tx/${txnHash}`} target=\"blank\" className='col-md-6'><Button className='d'>View txn on Block Explorer</Button></a> :\n              <div id='spinnerr' className='col-md-12 '>\n                {/* {document.getElementsByClassName('u').style.color = \"blue\"} */}\n                <center><CirclesWithBar color=\"blue\" innerCircleColor='red' barColor='green' ariaLabel=\"circles-with-indicator\" className=\"justify-content-center\" /></center>\n              </div>}\n          </div>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default CreateAsset\n\n{/* <Button onClick={Navigate(\"/\")}>Back</Button> */ }\n{/* <Link to=\"/\"><Button>Back</Button></Link> */ }\n{/* <div className='tx col-12'>\n          <div className='spline '>\n            <Spline  md={{ span: 3, offset: 3 }} scene={SCENE_OBJECT}  />\n          </div>\n        </div> */}\n\n\n\n          // function CreateAsset() {\n  //   const [data, setData] = useState({\n  //     tokenName: \"\", tokenId: \"\", totalsupply: \"\", NFT_URL: \"\"\n  //   })\n\n  //   const [isLoading, setLoading] = useState(true);\n\n  //   const [file, setFile] = useState('')\n\n  //   const [img, setImage] = useState()\n  //   // const Navigate = useNavigate()\n\n  //   let location = useLocation()\n  //   // console.log(location,\"____\")\n  //   const userAddress = location.state\n\n\n\n  //   const getData = (e) => {\n  //     const newData = { ...data };\n  //     newData[e.target.id] = e.target.value;\n  //     setData(newData);\n  //   }\n\n  //   const getFileData = (e) => {\n  //     const file = e.target.files[0];\n  //     const file1 = e.target.files[0];\n  //     setImage(URL.createObjectURL(file1))\n  //     setFile(file)\n  //     // console.log(file1);\n  //     // console.log(URL.createObjectURL(file1));\n  //   }\n\n  //   const SetData = async (e) => {\n\n  //     var a = [document.getElementById('tokenName').value, document.getElementById('totalsupply').value]\n  //     for (let i = 0; i < a.length; i++) {\n  //       if (a[i] === '') {\n  //         return Swal.fire({\n  //           title: \"error\",\n  //           icon: 'error',\n  //           text: `Empty field cant be accepted ${a[i]}`,\n  //         })\n  //       }\n  //     }\n\n\n\n  //     e.preventDefault();\n  //     const Data = new FormData()\n  //     // const File = { file }\n  //     let tokenId = data.tokeId;\n  //     await tokenId++\n\n  //     Data.append('userAccountAddress', userAddress)\n  //     Data.append('tokenName', data.tokenName);\n  //     Data.append('tokenId', Number(tokenId));\n  //     Data.append('totalSupply', data.totalsupply);\n  //     Data.append('file-upload', url)\n  //     var url;\n\n  //     axios.post('http://localhost:9966/createAsset/upload')\n\n\n  //     const testServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n  //     const token = {\n  //       'x-API-key': \"tzV5ZpDgtqaBUzskSO6Ly8TyYVlguUyt75iqYpsa\"\n  //     }\n\n  //     const port = 443\n  //     let algoClient = new algosdk.Algodv2(token, testServer, port)\n  //     const startingAmount = algoClient.amount;\n  //     let params = await algoClient.getTransactionParams().do();\n  //     const defaultFrozen = false;\n  //     const unitName = \"AlgoNFT\";\n  //     const assetName = data.tokenName;\n  //     const managerAddr = userAddress;\n  //     const reserveAddr = undefined;\n  //     const freezeAddr = undefined;\n  //     const clawbackAddr = undefined;\n  //     const decimals = 0;\n  //     const total = 1;\n  //     const hash = await crypto.createHash('sha256');\n  //     hash.update(\"metadatafile\");\n  //     const metadata = new Uint8Array(hash.digest());\n\n\n  //     // signing and sending \"txn\" allows \"addr\" to create an asset\n  //     const txn = algosdk.makeAssetCreateTxnWithSuggestedParamsFromObject({\n  //       from: userAddress,\n  //       total,\n  //       decimals,\n  //       assetName,\n  //       unitName,\n  //       assetURL: url,\n  //       assetMetadataHash: metadata,\n  //       defaultFrozen,\n  //       freeze: freezeAddr,\n  //       manager: managerAddr,\n  //       clawback: clawbackAddr,\n  //       reserve: reserveAddr,\n  //       suggestedParams: params,\n  //     });\n\n  //     const txn_b64 = await AlgoSigner.encoding.msgpackToBase64(txn.toByte());\n\n  //     let signedTxs = await AlgoSigner.signTxn([{ txn: txn_b64 }])\n  //     console.log(signedTxs)\n\n  //     // Get the base64 encoded signed transaction and convert it to binary\n  //     let binarySignedTx = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n\n  //     // Send the transaction through the SDK client\n  //     let id = await algoClient.sendRawTransaction(binarySignedTx).do();\n  //     console.log(id);\n\n  //     await axios.post('http://localhost:9966/createAsset/upload', Data)\n  //       .then(resp => {\n  //         if (resp.status === 204) {\n  //           return Swal.fire({\n  //             title: \"Error\",\n  //             icon: 'error',\n  //             text: `${resp.statusText}`,\n  //           })\n  //         }\n  //         setLoading(true);\n  //         console.log(resp);\n  //         url = resp.data\n  //         // Swal.fire({\n  //         //   title: \"NFT created\",\n  //         //   icon: 'success',\n  //         //   text: `Successfully created NFT`,\n  //         // })\n  //       })\n  //       .catch(err => {\n  //         Swal.fire({\n  //           title: \"error\",\n  //           icon: 'error',\n  //           text: `${err}`,\n  //         })\n  //       })\n\n\n\n  //     Swal.fire({\n  //       title: \"NFT created\",\n  //       icon: 'success',\n  //       text: `Txn id : ${id.txId}`,\n  //     })\n\n  //   }","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/contract/constants.js",[],"/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/homePage/HomePage.jsx",["87","88","89","90","91","92","93","94"],"import React, { useState } from 'react'\nimport { Navbar, Carousel, Row, Col, Nav, NavDropdown } from 'react-bootstrap'\nimport NavBar from '../NavBar/Navbar'\nimport CarouselPage from '../carousel/carousel'\nimport ImageArray from './img.jsx'\nimport './homepage.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nconst HomePage = (props) => {\n    return (\n        <div>\n            {/* <NavBar /> */}\n            <div className='HomePage'>\n                <div className='d-flex my-5 justify-content-center'>\n                    <div className='justify-content-center'>\n                        <h1 className='leads justify-content-center text-center'>Buy,sell, and <span style={{color : \"blue\"}}> showcase </span> NFTs  </h1>\n                        <p className='p d-flex justify-content-center'>from leading creators and brands</p>\n                    </div>\n\n                </div>\n                <div className='Div2'>\n                    <Col xs={8} md={{ span: 8, offset: 2 }}   >\n                        <div className='justify-content-center d-block align-items-center text-center '>\n                            <CarouselPage />\n                        </div>\n                    </Col>\n                </div>\n            </div>\n\n        </div>\n    )\n\n}\n\nexport default HomePage;\n","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/carousel/carousel.jsx",["95","96","97","98","99","100"],"import React from \"react\"\nimport { Navbar, Carousel, Row, Col, Nav, NavDropdown, Button } from 'react-bootstrap'\nimport './carosel.css'\n\n\n\nconst CarouselPage = () => {\n    return (\n        <div className=\"mmy-5 \">\n            <Carousel fade className=\"d-block\">\n                <Carousel.Item className=\"im\" >\n                    <img className=\"d-block \"\n                        src=\"https://d2vi0z68k5oxnr.cloudfront.net/195dfb70-4a11-4427-aee5-32dfc4929bd8/original.jpeg?d=lg-cover\"\n                        alt=\"First slide\"\n                    />\n                </Carousel.Item>\n                <Carousel.Item className=\"d-block\" >\n                    <div className=\"d-block\">\n                        <img\n                            className=\"d-block images\"\n                            src=\"https://d2vi0z68k5oxnr.cloudfront.net/e09562c2-5b3a-4370-abdc-67ac372e5d2d/original.jpeg?d=md-cover\"\n                            alt=\"Second slide\"\n                        />\n                        <Carousel.Caption >\n                            <div style={{ display: 'flex', justifyContent: 'center', marginBottom: \"500px\", color: 'white' }}>\n                                <center><h1>The City Of Crypto's</h1></center>\n                            </div>\n                        </Carousel.Caption>\n                    </div>\n                </Carousel.Item>\n                <Carousel.Item>\n                    <img\n                        className=\"d-block\"\n                        src=\"https://d2vi0z68k5oxnr.cloudfront.net/90d5d97f-9165-480c-9839-537102212140/original.jpeg?d=md-cover\"\n                        alt=\"Third slide\"\n                    />\n                </Carousel.Item>\n            </Carousel>\n        </div>\n    )\n}\n\nexport default CarouselPage;\n","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/popup/popup.jsx",["101","102","103"],"/*global AlgoSigner */\nimport React from 'react'\nimport { useState } from 'react';\nimport { Button, InputGroup, Form } from 'react-bootstrap';\nimport Swal from 'sweetalert2'\nimport './popup.css'\n\n\nconst PopUp = (props) => {\n    const [selectedAddress, setSelectedAddrrss] = useState(null);\n    if (!props.triggerStatus) return null;\n\n    function setUserAddress(e) {\n        console.log(e.target.value);\n        setSelectedAddrrss(e.target.value)\n    }\n\n    function chooseAndClose() {\n        if (selectedAddress === null) {\n            return Swal.fire({\n                title: \"No Accounts choosed yet!!!\",\n                icon: 'error',\n                text: `Kindly choose any of the acccounts.`,\n            });\n        } else {\n            // console.log(selectedAddress);\n            props.selectAddress(selectedAddress)\n            props.setTrigger(false);\n        }\n    }\n\n    return props.triggerStatus ? (\n        <div className=\"container overlay text-white\" id='con'>\n            <form onChange={setUserAddress} className=\"form col-12\">\n                <div className=\"radio align-items-center d-absolute\">\n                    <center className='text-primary'>Select Account</center>\n                    {props.usersAddress.map((user) => {\n                        return (\n                            <div key={user.address} id='inputDiv' >\n                                <input type=\"radio\" value={user.address} name=\"address\" /><label style={{ padding: \"10px\" }}>{user.address}</label>\n                            </div>\n                        )\n                    })}\n                </div>\n                <center><Button className='d' id='bttttn' onClick={chooseAndClose} >Submit</Button></center>\n            </form>\n        </div>) : \"\"\n}\n\nexport default PopUp","/Users/yukeshbaskar/Developer/PortFolio/Algorand/my-app/src/components/homePage/img.jsx",[],{"ruleId":"104","severity":1,"message":"105","line":25,"column":13,"nodeType":"106","endLine":32,"endColumn":4},{"ruleId":"104","severity":1,"message":"107","line":32,"column":6,"nodeType":"108","endLine":32,"endColumn":8,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":4,"column":8,"nodeType":"112","messageId":"113","endLine":4,"endColumn":20},{"ruleId":"110","severity":1,"message":"114","line":7,"column":22,"nodeType":"112","messageId":"113","endLine":7,"endColumn":28},{"ruleId":"110","severity":1,"message":"115","line":44,"column":15,"nodeType":"112","messageId":"113","endLine":44,"endColumn":23},{"ruleId":"110","severity":1,"message":"116","line":50,"column":15,"nodeType":"112","messageId":"113","endLine":50,"endColumn":23},{"ruleId":"110","severity":1,"message":"117","line":8,"column":8,"nodeType":"112","messageId":"113","endLine":8,"endColumn":16},{"ruleId":"110","severity":1,"message":"118","line":11,"column":10,"nodeType":"112","messageId":"113","endLine":11,"endColumn":13},{"ruleId":"104","severity":1,"message":"105","line":24,"column":15,"nodeType":"106","endLine":31,"endColumn":6},{"ruleId":"104","severity":1,"message":"119","line":31,"column":8,"nodeType":"108","endLine":31,"endColumn":10,"suggestions":"120"},{"ruleId":"104","severity":1,"message":"105","line":33,"column":15,"nodeType":"106","endLine":42,"endColumn":6},{"ruleId":"110","severity":1,"message":"121","line":56,"column":11,"nodeType":"112","messageId":"113","endLine":56,"endColumn":23},{"ruleId":"110","severity":1,"message":"122","line":69,"column":11,"nodeType":"112","messageId":"113","endLine":69,"endColumn":18},{"ruleId":"110","severity":1,"message":"123","line":90,"column":15,"nodeType":"112","messageId":"113","endLine":90,"endColumn":20},{"ruleId":"110","severity":1,"message":"124","line":91,"column":15,"nodeType":"112","messageId":"113","endLine":91,"endColumn":22},{"ruleId":"110","severity":1,"message":"125","line":166,"column":11,"nodeType":"112","messageId":"113","endLine":166,"endColumn":16},{"ruleId":"126","severity":1,"message":"127","line":306,"column":212,"nodeType":"128","messageId":"129","endLine":306,"endColumn":214},{"ruleId":"126","severity":1,"message":"127","line":311,"column":186,"nodeType":"128","messageId":"129","endLine":311,"endColumn":188},{"ruleId":"126","severity":1,"message":"127","line":325,"column":59,"nodeType":"128","messageId":"129","endLine":325,"endColumn":61},{"ruleId":"126","severity":1,"message":"127","line":337,"column":36,"nodeType":"128","messageId":"129","endLine":337,"endColumn":38},{"ruleId":"110","severity":1,"message":"130","line":4,"column":29,"nodeType":"112","messageId":"113","endLine":4,"endColumn":32},{"ruleId":"110","severity":1,"message":"131","line":4,"column":34,"nodeType":"112","messageId":"113","endLine":4,"endColumn":45},{"ruleId":"110","severity":1,"message":"132","line":4,"column":55,"nodeType":"112","messageId":"113","endLine":4,"endColumn":58},{"ruleId":"110","severity":1,"message":"133","line":4,"column":66,"nodeType":"112","messageId":"113","endLine":4,"endColumn":73},{"ruleId":"110","severity":1,"message":"134","line":5,"column":10,"nodeType":"112","messageId":"113","endLine":5,"endColumn":21},{"ruleId":"110","severity":1,"message":"135","line":19,"column":10,"nodeType":"112","messageId":"113","endLine":19,"endColumn":13},{"ruleId":"110","severity":1,"message":"136","line":80,"column":11,"nodeType":"112","messageId":"113","endLine":80,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":260,"column":1,"nodeType":"139","messageId":"140","endLine":260,"endColumn":55},{"ruleId":"137","severity":1,"message":"138","line":261,"column":1,"nodeType":"139","messageId":"140","endLine":261,"endColumn":51},{"ruleId":"137","severity":1,"message":"138","line":262,"column":1,"nodeType":"139","messageId":"140","endLine":266,"endColumn":19},{"ruleId":"110","severity":1,"message":"141","line":1,"column":17,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"142","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"143","line":2,"column":18,"nodeType":"112","messageId":"113","endLine":2,"endColumn":26},{"ruleId":"110","severity":1,"message":"144","line":2,"column":28,"nodeType":"112","messageId":"113","endLine":2,"endColumn":31},{"ruleId":"110","severity":1,"message":"130","line":2,"column":38,"nodeType":"112","messageId":"113","endLine":2,"endColumn":41},{"ruleId":"110","severity":1,"message":"131","line":2,"column":43,"nodeType":"112","messageId":"113","endLine":2,"endColumn":54},{"ruleId":"110","severity":1,"message":"145","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"146","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":18},{"ruleId":"110","severity":1,"message":"142","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":16},{"ruleId":"110","severity":1,"message":"144","line":2,"column":28,"nodeType":"112","messageId":"113","endLine":2,"endColumn":31},{"ruleId":"110","severity":1,"message":"132","line":2,"column":33,"nodeType":"112","messageId":"113","endLine":2,"endColumn":36},{"ruleId":"110","severity":1,"message":"130","line":2,"column":38,"nodeType":"112","messageId":"113","endLine":2,"endColumn":41},{"ruleId":"110","severity":1,"message":"131","line":2,"column":43,"nodeType":"112","messageId":"113","endLine":2,"endColumn":54},{"ruleId":"110","severity":1,"message":"147","line":2,"column":56,"nodeType":"112","messageId":"113","endLine":2,"endColumn":62},{"ruleId":"110","severity":1,"message":"148","line":1,"column":10,"nodeType":"149","messageId":"113","endLine":1,"endColumn":20},{"ruleId":"110","severity":1,"message":"150","line":4,"column":18,"nodeType":"112","messageId":"113","endLine":4,"endColumn":28},{"ruleId":"110","severity":1,"message":"151","line":4,"column":30,"nodeType":"112","messageId":"113","endLine":4,"endColumn":34},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'userAddress'. Either include it or remove the dependency array.","ArrayExpression",["152"],"no-unused-vars","'CarouselPage' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'response' is assigned a value but never used.","'accounts' is assigned a value but never used.","'FormData' is defined but never used.","'set' is defined but never used.","React Hook useEffect has a missing dependency: 'location.state'. Either include it or remove the dependency array.",["153"],"'TextDecoderr' is assigned a value but never used.","'SetData' is assigned a value but never used.","'lease' is assigned a value but never used.","'rekeyTo' is assigned a value but never used.","'check' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Nav' is defined but never used.","'NavDropdown' is defined but never used.","'Col' is defined but never used.","'Spinner' is defined but never used.","'useNavigate' is defined but never used.","'url' is assigned a value but never used.","'startingAmount' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'useState' is defined but never used.","'Navbar' is defined but never used.","'Carousel' is defined but never used.","'Row' is defined but never used.","'NavBar' is defined but never used.","'ImageArray' is defined but never used.","'Button' is defined but never used.","'AlgoSigner' is defined but never used.","Program","'InputGroup' is defined but never used.","'Form' is defined but never used.",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [userAddress]",{"range":"158","text":"159"},"Update the dependencies array to be: [location.state]",{"range":"160","text":"161"},[978,980],"[userAddress]",[1070,1072],"[location.state]"]